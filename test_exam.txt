// ***********************************************************************************************************************
// НА ВВОД ПОСТУПАЕТ ПОЛОЖИТЕЛЬНОЕ ИЛИ ОТРИЦАТЕЛЬНОЕ ЧИСЛО ИЗ ТРЕХ ЦИФР
// СДЕЛАТЬ, ЧТОБЫ ПЕРВАЯ И ПОСЛЕДНЯЯ ЦИФРА МЕНЯЛАСЬ МЕСТАМИ, ЕСЛИ ПЕРВАЯ ЦИФРА ОТРИЦАТЕЛЬНАЯ, ТО ВЫВЕСТИ 0
//
// #include <stdio.h>
//
// int main() {
//     int number, A, B, C;
//     scanf("%d", &number);
//     A = (number / 100);
//     B = (number / 10) - (A * 10);
//     C = number - (A * 100) - (B * 10);                 ПЕРВЫЙ ВАРИАНТ, С ВЫВОДОМ 0 (ЕСЛИ ОТРИЦАТЕЛЬНОЕ)
//     if ((A > 0) && (C > 0))
//     {
//         printf("%d%d%d", C, B, A);
//     }
//     else
//     {
//         printf("0");
//     }
//     return 0;
// }
//
// ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// #include <stdio.h>
//
// int main() {
//     int x, x1, x2, x3;
//     scanf("%d", &x);
//     if (x < 0) {
//         x = x * - 1;
//         printf("-");
//     }
//         x1 = x/100;
//         x2 = (x - x/100 * 100)/10;
//         x3 = x - x/10 * 10;
//         printf("%d%d%d", x3, x2, x1);
// }
//
// ***********************************************************************************************************************
// НА ВВОД ПОСТУПАЕТ ПРОИЗВОЛЬНОЕ ЧИСЛО 132485. ВЫВЕСТИ МАКСИМАЛЬНУЮ ЦИФРУ ИЗ НЕГО
//
// #include <stdio.h>
//
// int main() {
//     int number, max, current;
//     max = -1;
//     scanf("%d", &number);
//     do {
//         current = number % 10;
//         number = number / 10;
//         if (current >= max) {
//             max = current;
//         }
//     } while (current > 0); {
//         printf("%d", max);
//         return 0;
//     }
// }
//
// ***********************************************************************************************************************
// НА ВВОД ПОСТУПАЕТ ПОСЛЕДОВАТЕЛЬНОСТЬ ПОЛОЖИТЕЛЬНЫХ ЦЕЛЫХ ЧИСЕЛ ДО -1 (НА КОНЦЕ СТОИТ -1 И ОНА НЕ ЯВЛЯЕТСЯ ЕЁ ЭЛЕМЕНТОМ)
// ВЫВЕСТИ МАКСИМАЛЬНОЕ ЧИСЛО ИЗ ПОСЛЕДОВАТЕЛЬНОСТИ
//
// #include <stdio.h>
//
// int main()
// {
//     int max = -1;
//     int current;
//     do
//     {
//         scanf("%d", &current);
//         if (current > max)
//         {
//             max = current;
//         }
//     } while (current != -1);
//     printf("%d", max);
//     return 0;
// }
//
// ***********************************************************************************************************************
// НА ВХОД ПОСТУПАЮТ ЧИСЛА X, Y, Z (ТОЛЬКО 0 ИЛИ 1).
// ЕСЛИ ЗНАЧЕНИЕ ВЫРАЖЕНИЯ X and (Y or Z) ИСТИННО, ТО ВЫВЕСТИ ЕДИНИЦУ, ЕСЛИ НЕТ ТО НОЛЬ.
// ПРОВЕРИТЬ НА ВАЛИДНОСТЬ ВВОДА, В СЛУЧАЕ ОШИБКИ ВЫВЕСТИ (N/A).
//
// #include <stdio.h>
//
// int main()
// {
//     int x, y, z;
//     if (scanf("%d%d%d", &x, &y, &z) == 3 && x >= 0 && x <= 1 && y >= 0 && y <= 1 && z >= 0 && z <= 1) {
//         printf("%d", x && (z || y));
//     } else {
//         printf("n/a");
//     }
// }
//
// ***********************************************************************************************************************
// ПОСТУПАЮТ ТРИ ЧИСЛА A, B, C. НУЖНО ВЫВЕСТИ 1 ЕСЛИ С СТРОГО МЕЖДУ А И В, ИНАЧЕ 0.
// В СЛУЧАЕ ОШИБКИ ВЫВЕСТИ (N/A). if МОЖНО ИСПОЛЬЗОВАТЬ ТОЛЬКО ДЛЯ ПРОВЕРКИ
//
// #include <stdio.h>
//
// int main()
// {
//     int A, B, C;
//     if (scanf("%d%d%d", &A, &B, &C) == 3)
//     {
//         printf("%d", C > A && C < B);
//     }
//     else
//     {
//         printf("n/a");
//     }
// }
//
// ***********************************************************************************************************************
// ВЫВЕСТИ ПРОИЗВЕДЕНИЕ НЕЧЕТНЫХ ЦИФР ЦЕЛОГО ЧИСЛА, КОТОРОЕ ЗАДАЕТСЯ НА ВВОДЕ.
// ЕСЛИ НЕЧЕТНЫХ ЦИФР НЕТ, ТО ВЫВЕСТИ 0. В СЛУЧАЕ ОШИБКИ ВЫВЕСТИ (N/A).
//
// #include <stdio.h>
// #include <stdlib.h>
//
// int main() {
//     int n;
//     if (scanf("%d", &n) == 1) {
//         int mult = 1;
//         int flag = 0;
//         if (n < 0)
//             n = -n;
//         while (n != 0) {
//             int i = n % 10;
//             if (i % 2 == 1) {
//                 mult *= i;
//                 flag = 1;
//             }
//             n /= 10;
//         }
//         printf("%d", mult * flag);
//     } else {
//         printf("n/a");
//     }
//     return 0;
// }
//
// ***********************************************************************************************************************
// НАПИСАТЬ ПРОГРАММУ ПРОИЗВОДЯЩУЮ СКАЛЯРНОЕ УМНОЖЕНИЕ ДВУХ ВЕКТОРОВ n-МЕРНОГО ПРОСТРАНСТВА.
// НА ВХОД ПОСТУПАЕТ ЦЕЛОЕ ЧИСЛО n (РАЗМЕРНОСТЬ), ЗАТЕМ СЛЕДУЮТ 2 СТРОКИ: n-ЦЕЛОЧИСЛЕННЫХ КООРДИНАТ ПЕРВОГО ВЕКТОРА
// И n-ЦЕЛОЧИСЛЕННЫХ ВТОРОГО, РАЗДЕЛЕННЫЕ ПРОБЕЛОМ. В СЛУЧАЕ ОШИБКИ ВЫВЕСТИ (N/A).
//
// #include <stdio.h>
// #include <stdlib.h>
//
// int main() {
//     int n;
//     scanf("%d", &n);
//     int *vec1 = malloc(sizeof(int) * n);
//     int *vec2 = malloc(sizeof(int) * n);
//     for (int i = 0; i < n; i++) {
//         scanf("%d", &vec1[i]);
//     }
//     for (int i = 0; i < n; i++) {
//         scanf("%d", &vec2[i]);
//     }
//     int res = 0;
//     for (int i = 0; i < n; i++) {
//         res += vec1[i] * vec2[i];
//     }
//     free(vec1);
//     free(vec2);
//     printf("%d", res);
// }
//
// ***********************************************************************************************************************
// НАЙТИ МАКСИМАЛЬНОЕ ЧИСЛО ИЗ ВВЕДЕННЫХ, В КОНЦЕ -1 (НЕ ЯВЛЯЕТСЯ ЭЛЕМЕНТОМ)
//
// #include <stdio.h>
//
// int main () {
//    int tmp[300];
//    int z= 0, n, max=0, fl = 1;
//    char c;
//    for(int i = 0; z != -1; i++) {
//        scanf("%d%c", &z, &c);
//        if (i == 0 && z == -1) {
//            fl = 0;
//            printf("n/a");
//        } else {
//            tmp[i] = z;
//        }
//        n = i;
//    }
//    for (int i = 1; i < n; i++) {
//        if (tmp[max] < tmp[i]) {
//            max = i;
//        }
//    }
//    if (fl) {
//        printf("%d", tmp[max]);
//    }
//    return 0;
// }
//
// ***********************************************************************************************************************
// ПЕРЕВОД ГРАДУСНОЙ МЕРЫ В РАДИАННУЮ
//
// #include <stdio.h>
//
// int main() {
//     double x;
//     if (scanf("%lf", &x) == 1 && x != 0 ) {
//     x = x * 57.29;
//     printf("%.lf", x);
// } else {
//     printf("n/a");
// }
//     return 0;
// }
//
// ***********************************************************************************************************************
// НА ВВОД ПОСТУПАЕТ РАДИУС ШАРА (ВЕЩЕСТВЕННОЕ ЧИСЛО). ПЛОТНОСТЬ ШАРА 21500, Р = М / V (V = 4.0/3.0) * M_PI * pow(R, 3)
// НАЙТИ МАССУ ШАРА, В СЛУЧАЕ ОШИБОК (N/A).
//
// #include <stdio.h>
// #include <math.h>
//
// int main() {
//     int P = 21500;
//     double result;
//     double R;
//     if (scanf ("%lf", &R) != 1 || R <= 0) {
//         printf("n/a");
//     } else {
//     double tmp = (4.0/3.0) * M_PI * pow(R, 3);
//         result = tmp * P;
//         printf ("%.lf", round(result));
//     }
//     return 0;
// }
//
// ***********************************************************************************************************************
// НА ВВОД ПОСТУПАЕТ ПОСЛЕДОВАТЕЛЬНОСТЬ ЧИСЕЛ, НА КОНЦЕ -1 (НЕ ЯВЛЯЕТСЯ ЭЛЕМЕНТОМ)
// ВЫВЕСТИ УНИКАЛЬНЫЕ ЭЛЕМЕНТЫ ПОСЛЕДОВАТЕЛЬНОСТИ
//
// #include <stdio.h>
// #include <stdlib.h>
// #include <math.h>
//
// int main() {
// int n = 0;
// int c = 0;
// int size = sizeof(int) * 5;
// int *a = malloc(size);
// while (n != (-1)) {
//     if (c == size - 1) {
//         size *= 2;
//         a = realloc(a, size);
//     }
//     scanf("%d", &n);
//     if (n != (-1)){
//         a[c] = n;
//         c++;
//     }
// }
//     int b[c];
//     for (int i = 0; i < c; i++) {
//         b[i] = a[i];
//     }
//     for (int i = 0; i < c; i++) {
//         for (int j = 0; j < c; j++) {
//             if (i != j && a[i] == b[j] && b[i] != 0) {
//                 b[j] = 0;
//             }
//         }
//     }
//     int x[c];
//     int y = 0;
//     for (int i = 0; i < c; i++) {
//         if (b[i] != 0) {
//             x[y] = a[i];
//             y++;
//         } else if (a[i] == 0) {
//             x[y] = a[i];
//             y++;
//         }
//     }
//     for (int i = 0; i < y; i++) {
//         printf("%d ", x[i]);
//     }
//     free(a);
//     return 0;
// }
//
// ***********************************************************************************************************************
// НА ВВОД ПОСТУПАЕТ ПОСЛЕДОВАТЕЛЬНОСТЬ ЧИСЕЛ (НА КОНЦЕ -1 И НЕ ЭЛЕМЕНТ)
// ПОМЕНЯТЬ МЕСТАМИ МАКСИМАЛЬНЫЙ И МИНИМАЛЬНЫЙ ЭЛЕМЕНТ МАССИВА
//
// #include <stdio.h>
// #define BUFFER_SIZE 1000
//
// int main() {
//     int arr[BUFFER_SIZE];
//     int i = 0;
//     int max;
//     int min;
//     int max_id = 0;
//     int min_id = 0;
//
//     while (1) {
//         scanf("%d", &arr[i]);
//         if (arr[i] == -1)
//             break;
//         i++;
//     }
//     max = arr[0];
//     min = arr[0];
//     for (int j = 0; j < i; j++) {
//         if (arr[j] > max) {
//             max = arr[j];
//             max_id = j;
//         }
//
//         if (arr[j] < min) {
//             min = arr[j];
//             min_id = j;
//         }
//     }
//     arr[min_id] = max;
//     arr[max_id] = min;
//
//     for (int j = 0; j < i; j++) {
//         if (j == i - 1)
//             printf("%d", arr[j]);
//         else
//             printf("%d ", arr[j]);
//     }
// }
//
// ***********************************************************************************************************************
// НА ВХОД ПОСТУПАЕТ ЧИСЛО. НАЙТИ ПРОИЗВЕДЕНИЕ ВСЕХ НЕЧЕТНЫХ ЦИФР В ЧИСЛЕ, ЕСЛИ ЦИФР НЕТ ТО ВЫВЕСТИ 0
//
// #include <stdio.h>
// #include <stdlib.h>
//
// int main() {
//    int xx,res = 1, sch = 0;
//    scanf("%d", &xx);
//    while (xx > 0) {
//        if ((xx % 10) % 2 == 1) {
//            res = res * (xx % 10);
//            sch++;
//        }
//        xx = xx/10;
//    }
//    if (sch == 0)
//        printf("0");
//    else
//        printf("%d", res);
// }
//
// ***********************************************************************************************************************
// НА ВХОД ПОСТУПАЕТ ЧИСЛО (-1 НА КОНЦЕ). ТРЕБУЕТСЯ ПОМЕНЯТЬ МЕСТАМИ ДВЕ ПОСЛЕДНИЕ ЦИФРЫ (ДИНАМИЧЕСКАЯ ПАМЯТЬ)
//
// #include <stdio.h>
// #include <stdlib.h>
// int main() {
//     int size = 5 * sizeof(int);
//     int *a = (int *)malloc(size);
//     int i = 0;
//     scanf("%d", &a[i]);
//     while (a[i] != -1) {
//         i++;
//         scanf("%d", &a[i]);
//         if (i == size - 1) {
//             size *= 2;
//             a = realloc(a, size);
//         }
//     }
//     for (int j = 0; j < i / 2 + i % 2; j++) {
//         if (j == i - j - 1) {
//             printf("%d", a[j]);
//         } else {
//             printf("%d", a[j]);
//             printf("%d", a[i - j - 1]);
//         }
//     }
// }
//
// ***********************************************************************************************************************
// МАТРИЦА ПО СПИРАЛИ
//
// #include <stdio.h>
// #include <stdlib.h>
// int main() {
//     int y, x;
//     scanf("%d%d", &y, &x);
//     int **data = (int **)malloc(sizeof(int *) * y);
//     for (int i = 0; i < y; i++) {
//         data[i] = (int *)malloc(sizeof(int) * x);
//     }
//     int MinI = 0;
//     int MinJ = 0;
//     int MaxI = y;
//     int MaxJ = x;
//     int k = 0;
//     while (k < x * y) {
//         for (int kItor = MinI; kItor < MaxI - 1; kItor++) {
//             k++;
//             data[kItor][MinJ] = k;
//         }
//         for (int jk = MinJ; jk < MaxJ; jk++) {
//             k++;
//             data[MaxI - 1][jk] = k;
//         }
//         for (int kItor = MaxI - 2; kItor >= MinI; kItor--) {
//             k++;
//             data[kItor][MaxJ - 1] = k;
//         }
//         for (int jk = MaxJ - 2; jk > MinJ; jk--) {
//             k++;
//             data[MinI][jk] = k;
//         }
//         MinJ++;
//         MinI++;
//         MaxJ--;
//         MaxI--;
//     }
//     for (int i = 0; i < y; i++) {
//         for (int j = 0; j < x; j++) {
//             printf("%3d   ", data[i][j]);
//         }
//         printf("\n");
//     }
// }
//
// ***********************************************************************************************************************
// НА ВХОД ПОСТУПАЮТ ЗАГЛАВНЫЕ ИЛИ МАЛЕНЬКИЕ БУКВЫ И _. ВЫВЕСТИ YES ИЛИ NO
//
// #include <stdio.h>
// #include <stdlib.h>
//
// int main()
// {
//     char *arr = malloc(101 * sizeof(int));
//     scanf("%[^\n]s", arr);
//     int flag = 0;
//     if ((arr[0] >= 'A' && arr[0] <= 'Z') || (arr[0] >= 'a' && arr[0] <= 'z') ||
//         arr[0] == '_')
//     {
//         for (int i = 1; i < 100 && flag != 1 && (arr[i] != '\0'); i++)
//         {
//             if ((arr[i] >= '0' && arr[i] <= '9') ||
//                 (arr[i] >= 'A' && arr[i] <= 'Z') ||
//                 (arr[i] >= 'a' && arr[i] <= 'z') || arr[i] == '_')
//             {
//                 flag = 0;
//             }
//             else
//             {
//                 flag = 1;
//                 break;
//             }
//             if (arr[i] == ' ')
//             {
//                 flag = 1;
//                 break;
//             }
//         }
//     }
//     else
//     {
//         flag = 1;
//     }
//     if (flag == 0)
//     {
//         printf("YES");
//     }
//     else
//     {
//         printf("NO");
//     }
//     free(arr);
//     return 0;
// }
//
// ***********************************************************************************************************************
// ЗАДАЧА НА БИНОМИАЛЬНЫЙ КОЭФФИЦИЕНТ
//
// #include <stdio.h>
// #include <stdlib.h>
// #include <math.h>
//
// int fact (int n);
//
// int main() {
//     int k, c;
//     int n;
//     scanf("%d", &n);
//     printf("%d\n\n", fact(n));
//     for ( k = 0; k <= n; k++) {
//         c = fact(n) / (fact(k) * fact(n-k));
//         printf("%d\n", c);
//     }
// }
//
// int fact (int n) {
//     int fact = 1;
//     for (int i = 1; i <= n; i++) {
//         fact = fact * i;
//     }
//     return fact;
// }
//
// ***********************************************************************************************************************
